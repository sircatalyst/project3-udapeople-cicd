version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
  
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install -y python3 python3-pip
            python3 -m pip install --user ansible
 
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow
    parameters:
      # Add parameter here
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/QUtm9gL5qrSrMSXw5s2L1C/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["02:34:20:f6:3a:66:be:50:ea:01:bd:2a:d7:26:9f:86"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              # Run and save the migration output
              npm run migrations > migrations_dump.log

              echo
              cat migrations_dump.log
              echo

      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
              sudo apt-get update && sudo apt-get install -y ca-certificates
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.log
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "L9DmiGeD3T8insU64sWRFH" in your local terminal first
                  curl https://kvdb.io/L9DmiGeD3T8insU64sWRFH/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      
      - persist_to_workspace:
          root: ~/
          paths:
              - project/backend/migrations_dump.log
      - revert-migrations
      - destroy-environment
  # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update nodejs  
            apk add --update npm
            apk add --update ansible
            pip3 install awscli

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP="44.207.33.166"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo $BACKEND_IP > ~/backend_ip.txt
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist

            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - backend_ip.txt
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["02:34:20:f6:3a:66:be:50:ea:01:bd:2a:d7:26:9f:86"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar gzip openssh-client ansible nodejs npm
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            ls -lh
            cd ..
            pwd
            tar -C backend -czvf artifact.tar.gz .
            tar -ztvf artifact.tar.gz
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip3 install awscli
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(cat ~/backend_ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            previousWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            touch previousWorkflowID.txt
            echo $previousWorkflowID >> ~/previousWorkflowID.txt
            cat ~/previousWorkflowID.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            
            echo "previousWorkflowID: ${previousWorkflowID}"
            echo "Current Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - previousWorkflowID.txt
      - revert-migrations
      - destroy-environment
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get and remove old stack workflow id
          command: |
            export previousWorkflowID=$(cat ~/previousWorkflowID.txt)
            echo "${previousWorkflowID}" 
            echo previousWorkflowID: "${previousWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${previousWorkflowID}" ]]
            then
              echo "------------Deleting previous resources started"------------"
              aws s3 rm "s3://udapeople-${previousWorkflowID}" --recursive
              aws s3 rb "s3://udapeople-${previousWorkflowID}"
              aws cloudformation delete-stack --stack-name "backend-${previousWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${previousWorkflowID}"
              echo "Successfully deleted previous resources"
            else 
              echo "------------Error deleting resources"------------"
            fi
      - revert-migrations
      - destroy-environment

  notify_on_success:
    docker:
    - image: cimg/base:stable
    steps:
    - slack/notify:
        event: pass
        channel: test-notification
        custom: |
          {
            "blocks": [
              {
                "type": "section",
                "fields": [
                  {
                    "type": "plain_text",
                    "text": "*This is a text notification*",
                    "emoji": true
                  }
                ]
              }
            ]
          }

workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - test-backend:
          requires: [build-backend]
      - test-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

      - notify_on_success:
          requires:
            -  cleanup
      - notify_on_success:
          requires:
            -  cleanup